Apply the 12-Factor Principles to a FastAPI Project

Instructions
Build a small but meaningful FastAPI application.

Your project can range from a simple health check service to a more interactive utility such as a calculator, sentiment analyzer, or a data processing microservice. Focus on creating something functional, purposeful, and easy to understand.

Deliverables: A document containing

1) Link of your A GitHub repository containing your project

A README.md that explains:
What your project does

How to run it (locally or using Docker)
Any configuration or setup notes
Accessible link of a short screen recording of video

Your app running
CI workflow or tests passing


Details:
Post-Session Task: Apply the 12-Factor Principles to a FastAPI Project
Objective:
Using what you've learned, create a FastAPI-based microservice or utility that applies as many
12-Factor principles as possible. Focus on practicality, clarity, and demonstrating good
development habits.
Your Project:
Build a small but meaningful FastAPI app — it can be anything from a basic health check
service to a more interactive utility (e.g., a calculator, sentiment analyzer, or data processing
microservice).
Guidelines (not strict requirements):
❖ Use environment variables for configuration via pydantic or similar
❖ Structure your project with a clear layout (cookiecutter or your own)
❖ Set up Git with a simple branching strategy
❖ Configure and use pre-commit hooks
❖ Add at least one test case using pytest
❖ Use Docker to containerize your application
❖ Optionally use docker-compose to add a second service (e.g., Redis or Postgres)
❖ Set up a GitHub Actions workflow (for linting, tests, Docker build, etc.)
❖ Add basic documentation with MkDocs or a simple README
❖ Include VSCode settings/extensions if helpful (optional)
Deliverables:
❖ A GitHub repository containing your project
❖ A README.md that explains:
➢ What your project does
➢ How to run it (locally or using Docker)
➢ Any configuration or setup notes
❖ A short screen recording video of :
➢ Your app running
➢ CI workflow or tests passing
Optional Exploration Ideas:
❖ Deploy to a test environment or publish to Docker Hub
❖ Integrate a real API (e.g., weather, currency rates, public datasets)
❖ Use FastAPI features like dependencies, events, or background tasks
❖ Try out async database operations
What We'll Look For (Flexible):
❖ Clear application of 12-Factor principles
❖ Thoughtful project design
❖ Clean, well-documented code
❖ Effective use of modern tools (Docker, GitHub Actions, etc.)
❖ Simplicity and clarity over complexity
Note: Don’t worry about building something big, just demonstrate what you've learned in a
clean, practical way. Be creative, explore, and have fun!

My WebApp Idea:

AI-Powered Content Moderator API
Concept: A microservice that analyzes text content for toxicity, profanity, and sentiment, helping content platforms maintain healthy online environments.
Features:

Text analysis endpoints for toxicity detection, sentiment analysis, and content categorization
Configurable moderation thresholds via environment variables
Rate limiting and API key authentication
Comprehensive logging of moderation decisions (without storing actual content)
Caching layer to improve performance for repeated content

12-Factor highlights:

Codebase: Single repository with clear separation of concerns
Dependencies: Explicit dependency declaration with requirements.txt/Poetry
Config: Environment variables for thresholds and API keys
Backing services: External AI service treated as attached resource
Build, release, run: Clear separation with Docker
Processes: Stateless design with Redis for caching
Port binding: Self-contained service exposing HTTP API
Concurrency: Horizontal scaling capability through stateless design
Disposability: Fast startup/shutdown with proper signal handling
Dev/prod parity: Docker ensures consistent environments
Logs: Structured JSON logging to stdout
Admin processes: Utilities for maintenance tasks
